options {

}

TOKEN : {
        <VOID :"void">
    |   <STATIC :"static">
    |   <CHAR   :"char">
    |   <SHORT  :"short">
    |   <INT    :"int">
    |   <LONG   :"long">
    |   <STRUCT :"struct">
    |   <UNION  :"union">
    |   <ENUM   :"enum">
    |   <CONST  :"const">
    |   <SIGNED :"signed">
	|	<UNSIGNED	: "unsigned">
	|	<IF	    : "if">
	|	<ELSE	: "else">
	|	<SWITCH	: "switch">
	|	<CASE	: "case">
	|	<WHILE	: "while">
	|	<DO	: "do">
	|	<FOR	: "for">
	|	<RETURN	: "return">
	|	<BREAK	: "break">
	|	<CONTINUE	: "continue">
	|	<GOTO	: "goto">
	|	<TYPEDEF	: "typedef">
	|	<IMPORT	: "import">
	|	<SIZEOF	: "sizeof">
}

//identifier
TOKEN : {
    <IDENTIFIER: ["a"-"z","A"-"Z","_"](["a"-"z","A"-"Z","_","0"-"9"])*>
}

//number
TOKEN : {
    <INTEGER :["1"-"9"](["0"-"9"])*("U")?("L")?
            |"0"["x","X"](["0"-"9","a"-"f","A"-"F"])+("U")?("L")?
            |"0"(["0"-"7"])*("U")?("L")?>
}

//space
SPECIAL_TOKEN : {
    <SPACE : (["\t"," ","\n","\r","\f"])+>
}

//comment
SPECIAL_TOKEN : {
    <COMMENT : "//"(~["\n","\r"])*("\n"|"\r"|"\r\n")?>
}
MORE : {
    "/*" :IN_BLOCK_COMMENT
}
<IN_BLOCK_COMMENT> MORE: {
    <~[]>
}
<IN_BLOCK_COMMENT> SKIP : {
    "*/" : DEFAULT
}

//string
MORE :{
    "\"" : IN_STRING
}
<IN_STRING> MORE: {
        <(~["\"","\n","\r","\\"])+ >
    |   <"\\" (["0"-"7"]){3}>
    |   <"\\" ~[]>
}
<IN_STRING> TOKEN : {
    <STRING : "\""> : DEFAULT
}
//character
MORE :{
    "'" : IN_CHARACTER
}
<IN_CHARACTER> MORE:{
        <~["'","\\","\n","\r"]> : CHARACTER_TERM
    |   <"\\" (["0"-"7"]){3}> : CHARACTER_TERM
    |   <"\\" ~[]> : CHARACTER_TERM
}
<CHARACTER_TERM> TOKEN: {
    <CHARACTER: "'">: DEFAULT
}

//the whole file to compile
void compilation_unit ( ):{}
{
    import_stmts ( ) top_defs ( ) <EOF>
}

//import libraries
void import_stmts():{}
{
    (import_stmt())*
}

//define functions or variables
void top_defs():{}
{
    (LOOKAHEAD(storage() typeref() <IDENTIFIER> "(")
            defun()
        |   LOOKAHEAD(3)
            defvars()
        |   defconst()
        |   defstruct()
        |   defunion()
        |   typedef()
    )*
}

//define expression
void expr():{}
{
    LOOKAHEAD(term() "=")
    term() "=" expr()
    | LOOKAHEAD(term() opassign_op())
      term() opassign_op() expr()
    | expr10()
}

//import library
void import_stmt ():{}
{
    <IMPORT> name() ("." name())* ";"
}

void defvars():{}
{
    storage() type() name() ["=" expr()]
            ("," name() ["=" expr()])* ";"
}

void defun():{}
{
    storage() typeref() name() "(" params () ")" block()
}

void defstruct():{}
{
    <STRUCT> name() member_list() ";"
}

void defunion():{}
{
    <UNION> name() member_list() ";"
}

void typedef():{}
{
    <TYPEDEF> typeref() <IDENTIFIER> ";"
}


void stmts():{}
{
    (stmt())*
}

void stmt():{}
{
    ";"
    | LOOKAHEAD(2) labeled_stmt()
    | expr() ";"
    | block()
    | if_stmt()
    | while_stmt()
    | dowhile_stmt()
    | for_stmt()
    | switch_stmt()
    | break_stmt()
    | continue_stmt()
    | goto_stmt()
    | return_stmt()
}

void if_stmt():{}
{
    <IF> "(" expr() ")" stmt() [LOOKAHEAD(1) <ELSE> stmt() ]
}

void while_stmt():{}
{
    <WHILE> "(" expr() ")" stmt()
}

void for_stmt():{}
{
    <FOR> "(" [expr()] ";" [expr()] ";" [expr()] ")" stmt()
}

void break_stmt():{}
{
    <BREAK> ";"
}

void return_stmt():{}
{
    LOOKAHEAD(2) <RETURN> ";"
    | <RETURN> expr() ";"
}

void type(): {}
{
    typeref()
}

void typeref():{}
{
    typeref_base()
    (LOOKAHEAD(2) "[" "]"
    | "[" <INTEGER> "]"
    | "*"
    | "(" param_typerefs() ")"
    )*
}

def typeref_base():{}
{
        <VOID>
    |   <CHAR>
    |   <SHORT>
    |   <INT>
    |   <LONG>
    |   LOOKAHEAD(2) <UNSIGNED> <CHAR>
    |   LOOKAHEAD(2) <UNSIGNED> <SHORT>
    |   LOOKAHEAD(2) <UNSIGNED> <INT>
    |   <UNSIGNED> <LONG>
    |   <STRUCT> <IDENTIFIER>
    |   <UNION> <IDENTIFIER>
    |   LOOKAHEAD({isType(getToken(1).image)}) <IDENTIFIER>
}

void member_list():{}
{
    "{" (slot() ";")* "}"
}

void slot():{}
{
    type() name()
}

void params():{}
{
        LOOKAHEAD(<VOID> ")") <VOID>
    |   fixedparams () ["," "..."]
}

void fixedparams():{}
{
    param() (LOOKAHEAD(2) "," param() )*
}

void param():{}
{
    type() name()
}

void block():{}
{
    "{" defvar_list() stmts() "}"
}

void name():{}
{
    <IDENTIFIER>
}

void storage():{}
{
    [<STATIC>]
}